from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

def handle_captcha(driver, page, max_retry=3):
    """
    H√†m x·ª≠ l√Ω CAPTCHA v·ªõi ph√°t hi·ªán ch√≠nh x√°c h∆°n ƒë·ªÉ tr√°nh c·∫£nh b√°o sai

    Args:
        driver: WebDriver instance
        page: S·ªë trang hi·ªán t·∫°i
        max_retry: S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa

    Returns:
        bool: True n·∫øu CAPTCHA ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng ho·∫∑c kh√¥ng c√≥ CAPTCHA, False n·∫øu th·∫•t b·∫°i
    """
    # Danh s√°ch c√°c d·∫•u hi·ªáu CAPTCHA ch√≠nh x√°c h∆°n
    primary_captcha_indicators = [
        # Google reCAPTCHA (ch·ªâ ph√°t hi·ªán c√°c ph·∫ßn t·ª≠ ch·∫Øc ch·∫Øn)
        {"by": By.CSS_SELECTOR, "value": "iframe[src*='recaptcha/api2/anchor']"},
        {"by": By.CSS_SELECTOR, "value": "iframe[src*='recaptcha/api2/bframe']"},
        {"by": By.CSS_SELECTOR, "value": "div.g-recaptcha[data-sitekey]"},

        # hCaptcha (ch·ªâ ph√°t hi·ªán khung iframe ch√≠nh)
        {"by": By.CSS_SELECTOR, "value": "iframe[src*='hcaptcha.com/captcha']"},

        # CloudFlare protection r√µ r√†ng
        {"by": By.CSS_SELECTOR, "value": "#cf-captcha-container"},
        {"by": By.CSS_SELECTOR, "value": "div.cf-captcha-container"},

        # N√∫t x√°c th·ª±c CAPTCHA c·ª• th·ªÉ
        {"by": By.XPATH, "value": "//button[text()='Verify you are human' or text()='X√°c minh b·∫°n l√† ng∆∞·ªùi']"}
    ]

    # Ki·ªÉm tra c√°c d·∫•u hi·ªáu CAPTCHA c·ª• th·ªÉ
    captcha_detected = False
    captcha_element = None

    for indicator in primary_captcha_indicators:
        try:
            captcha_element = driver.find_element(indicator["by"], indicator["value"])
            if captcha_element.is_displayed():
                captcha_detected = True
                print(f"üö® CAPTCHA ph√°t hi·ªán tr√™n trang {page} (d·∫•u hi·ªáu: {indicator['value']})")
                break
        except NoSuchElementException:
            continue

    # N·∫øu kh√¥ng t√¨m th·∫•y qua c√°c ch·ªâ b√°o ch√≠nh, ki·ªÉm tra th√™m c√°c ƒë·∫∑c ƒëi·ªÉm ph·ªï bi·∫øn
    # nh∆∞ng ch·ªâ khi c√≥ d·∫•u hi·ªáu r√µ r√†ng v·ªÅ CAPTCHA
    if not captcha_detected:
        page_text = driver.page_source.lower()

        # Ki·ªÉm tra c√°c khung t∆∞∆°ng t√°c c·ªßa captcha
        captcha_frames = driver.find_elements(By.TAG_NAME, "iframe")
        captcha_frame_detected = False

        for frame in captcha_frames:
            src = frame.get_attribute("src") or ""
            if ("recaptcha" in src or "hcaptcha" in src or "captcha" in src) and frame.is_displayed():
                captcha_frame_detected = True
                break

        # Ch·ªâ khi c√≥ iframe CAPTCHA hi·ªÉn th·ªã ho·∫∑c c√≥ ch·ª©a c·ª•m t·ª´ x√°c minh r√µ r√†ng
        # m·ªõi x√°c ƒë·ªãnh l√† c√≥ CAPTCHA
        specific_captcha_keywords = [
            'please complete the security check',
            'please verify you are a human',
            'i am not a robot',
            'captcha challenge',
            'security verification',
            'x√°c minh b·∫°n kh√¥ng ph·∫£i l√† robot',
            'x√°c minh b·∫°n l√† ng∆∞·ªùi d√πng',
            'vui l√≤ng ho√†n th√†nh qu√° tr√¨nh x√°c th·ª±c'
        ]

        if captcha_frame_detected or any(keyword in page_text for keyword in specific_captcha_keywords):
            captcha_detected = True
            print(f"üö® CAPTCHA c√≥ th·ªÉ ƒë∆∞·ª£c ph√°t hi·ªán qua n·ªôi dung trang {page}")

    # N·∫øu kh√¥ng ph√°t hi·ªán CAPTCHA, tr·∫£ v·ªÅ th√†nh c√¥ng
    if not captcha_detected:
        return True

    # N·∫øu c√≥ CAPTCHA, th·ª≠ t·ª´ng c√°ch kh√°c nhau ƒë·ªÉ x·ª≠ l√Ω
    retry_count = 0

    while retry_count < max_retry:
        # T·∫°m d·ª´ng ƒë·ªÉ ng∆∞·ªùi d√πng x·ª≠ l√Ω th·ªß c√¥ng
        try:
            # C·ªë g·∫Øng chuy·ªÉn sang khung iframe n·∫øu c√≥
            captcha_frames = []
            try:
                # T√¨m c√°c iframe c√≥ th·ªÉ ch·ª©a CAPTCHA
                frames = driver.find_elements(By.TAG_NAME, "iframe")
                for frame in frames:
                    src = frame.get_attribute("src") or ""
                    if ("recaptcha" in src or "hcaptcha" in src or "captcha" in src) and frame.is_displayed():
                        captcha_frames.append(frame)
            except:
                pass

            # N·∫øu t√¨m th·∫•y iframe CAPTCHA, chuy·ªÉn ƒë·∫øn iframe ƒë·∫ßu ti√™n
            if captcha_frames:
                try:
                    driver.switch_to.frame(captcha_frames[0])
                    print("üîç ƒê√£ chuy·ªÉn ƒë·∫øn iframe CAPTCHA")
                except:
                    driver.switch_to.default_content()
                    print("‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn iframe CAPTCHA")
            else:
                print("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y iframe CAPTCHA, x·ª≠ l√Ω tr√™n trang ch√≠nh")

            print(f"üîì Vui l√≤ng x·ª≠ l√Ω CAPTCHA th·ªß c√¥ng (l·∫ßn th·ª≠ {retry_count + 1}/{max_retry})")
            print("‚è∏Ô∏è Sau khi ho√†n th√†nh, h√£y nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            input()

            # Chuy·ªÉn v·ªÅ khung ch√≠nh
            driver.switch_to.default_content()

            # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ trang c·∫≠p nh·∫≠t sau khi x·ª≠ l√Ω CAPTCHA
            time.sleep(3)

            # X√°c minh CAPTCHA ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω b·∫±ng c√°ch ki·ªÉm tra l·∫°i
            captcha_still_exists = False

            for indicator in primary_captcha_indicators:
                try:
                    element = driver.find_element(indicator["by"], indicator["value"])
                    if element.is_displayed():
                        captcha_still_exists = True
                        break
                except NoSuchElementException:
                    continue

            if not captcha_still_exists:
                print("‚úÖ CAPTCHA ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!")
                return True

            # Ki·ªÉm tra xem trang c√≥ thay ƒë·ªïi kh√¥ng b·∫±ng c√°ch xem URL
            # M·ªôt s·ªë trang s·∫Ω chuy·ªÉn h∆∞·ªõng sau khi x·ª≠ l√Ω CAPTCHA
            current_url = driver.current_url
            if "captcha" not in current_url.lower() and "challenge" not in current_url.lower():
                print("‚úÖ Trang ƒë√£ ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng, c√≥ v·∫ª CAPTCHA ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!")
                return True

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω CAPTCHA: {e}")

        retry_count += 1

    print("‚ùå ƒê√£ h·∫øt s·ªë l·∫ßn th·ª≠ x·ª≠ l√Ω CAPTCHA")
    return False


# H√†m x·ª≠ l√Ω captcha r√∫t g·ªçn ch·ªâ ph√°t hi·ªán c√°c lo·∫°i CAPTCHA ph·ªï bi·∫øn
def detect_captcha(driver):
    """
    H√†m ch·ªâ d√πng ƒë·ªÉ ph√°t hi·ªán CAPTCHA, kh√¥ng x·ª≠ l√Ω
    S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ph√°t hi·ªán ch√≠nh x√°c h∆°n ƒë·ªÉ tr√°nh c·∫£nh b√°o sai

    Args:
        driver: WebDriver instance

    Returns:
        bool: True n·∫øu ph√°t hi·ªán CAPTCHA, False n·∫øu kh√¥ng
    """
    from selenium.webdriver.common.by import By
    from selenium.common.exceptions import NoSuchElementException

    # Danh s√°ch c√°c d·∫•u hi·ªáu CAPTCHA ch·∫Øc ch·∫Øn
    captcha_selectors = [
        # Google reCAPTCHA
        ("css", "iframe[src*='recaptcha/api2/anchor']"),
        ("css", "iframe[src*='recaptcha/api2/bframe']"),
        ("css", "div.g-recaptcha[data-sitekey]"),

        # hCaptcha
        ("css", "iframe[src*='hcaptcha.com/captcha']"),

        # CloudFlare
        ("css", "#cf-captcha-container"),

        # Text r√µ r√†ng v·ªÅ CAPTCHA
        ("xpath", "//div[contains(text(), 'I am not a robot') and not(ancestor::script)]"),
        ("xpath", "//div[contains(text(), 'T√¥i kh√¥ng ph·∫£i l√† robot') and not(ancestor::script)]"),
        ("xpath", "//button[text()='Verify you are human' or text()='X√°c minh b·∫°n l√† ng∆∞·ªùi']")
    ]

    # Ki·ªÉm tra c√°c selector CAPTCHA
    for selector_type, selector in captcha_selectors:
        try:
            if selector_type == "css":
                element = driver.find_element(By.CSS_SELECTOR, selector)
            else:
                element = driver.find_element(By.XPATH, selector)

            if element.is_displayed():
                return True
        except NoSuchElementException:
            continue

    # Ki·ªÉm tra iframe CAPTCHA
    frames = driver.find_elements(By.TAG_NAME, "iframe")
    for frame in frames:
        src = frame.get_attribute("src") or ""
        if src and ("recaptcha" in src or "hcaptcha" in src) and "api2" in src and frame.is_displayed():
            return True

    return False


# V√≠ d·ª• s·ª≠ d·ª•ng h√†m detect_captcha
def check_for_captcha(driver, page_identifier, wait_after_solve=10):
    """
    H√†m ki·ªÉm tra CAPTCHA tr√™n trang v√† x·ª≠ l√Ω n·∫øu c·∫ßn

    Args:
        driver: WebDriver instance
        page_identifier: ƒê·ªãnh danh trang (d√πng cho log)
        wait_after_solve: S·ªë gi√¢y ch·ªù sau khi gi·∫£i captcha (m·∫∑c ƒë·ªãnh 10s)

    Returns:
        bool: True n·∫øu trang kh√¥ng c√≥ CAPTCHA ho·∫∑c ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng, False n·∫øu kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c
    """
    if detect_captcha(driver):
        print(f"üö® Ph√°t hi·ªán CAPTCHA tr√™n {page_identifier}")

        # L∆∞u URL hi·ªán t·∫°i tr∆∞·ªõc khi x·ª≠ l√Ω captcha
        current_url = driver.current_url

        # X·ª≠ l√Ω captcha
        if handle_captcha(driver, page_identifier):
            # ƒê·ª£i th√™m th·ªùi gian sau khi gi·∫£i captcha
            print(f"‚è≥ ƒê·ª£i {wait_after_solve}s sau khi gi·∫£i captcha...")
            time.sleep(wait_after_solve)

            # Ki·ªÉm tra xem URL c√≥ thay ƒë·ªïi kh√¥ng
            if driver.current_url != current_url:
                print(f"‚ö†Ô∏è URL ƒë√£ thay ƒë·ªïi sau khi gi·∫£i captcha: {driver.current_url}")
                # Quay l·∫°i URL ban ƒë·∫ßu
                print(f"üîô Quay l·∫°i URL ban ƒë·∫ßu: {current_url}")
                driver.get(current_url)
                time.sleep(3)  # ƒê·ª£i trang t·∫£i l·∫°i

                # Ki·ªÉm tra l·∫°i captcha sau khi quay l·∫°i
                if detect_captcha(driver):
                    print("üö® V·∫´n c√≤n CAPTCHA sau khi quay l·∫°i URL ban ƒë·∫ßu")
                    return False

            return True
        return False
    return True

# S·ª≠ d·ª•ng trong v√≤ng l·∫∑p crawl
# while page <= max_pages:
#     url = f"{base_url}&page={page}"
#     driver.get(url)
#
#     # Ki·ªÉm tra v√† x·ª≠ l√Ω CAPTCHA
#     if not check_for_captcha(driver, page):
#         print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω CAPTCHA tr√™n trang {page}, th·ª≠ trang ti·∫øp theo")
#         page += 1
#         continue
#
#     # Ti·∫øp t·ª•c crawl trang...